{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack:///./src/taskpane/taskpane.js?"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global console, document, Excel, Office */\n\n// Connect database lấy dữ liệu\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\n    document.getElementById(\"app-body\").style.display = \"flex\";\n    // Determine if the user's version of Office supports all the Office.js APIs that are used in the tutorial.\n    if (!Office.context.requirements.isSetSupported('ExcelApi', '1.7')) {\n      console.log('Sorry. The tutorial add-in uses Excel.js APIs that are not available in your version of Office.');\n    }\n\n    // Thử xử lý form select của Bootstrap\n    $(\"option[selected]\").hide()\n    // $(\"option[selected]\").removeAttr(\"selected\")\n    $(\"select.taskpane__btn\").on(\"change\",function() {\n      let type = $(this).val()\n        createReport(type)\n    })\n\n    \n\n    // create template report\n    // $(\"#create-report\").click(() => { createReport() })\n\n\n    //clear table\n    document.getElementById(\"clear-table\").onclick = clearTable;\n\n    // connect database\n    document.getElementById('connect-db').onclick = connectDB;\n\n    // Open Dialog\n    document.getElementById(\"open-dialog\").onclick = openDialog;\n  }\n});\n// Hàm tạo template báo cáo\nasync function createReport(type) {\n  if (type == 1) {\n    await clearTable()\n    await Excel.run(async (context) => {\n      //lấy worksheet đang làm việc hiện tại\n      const currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\n\n      //xóa đường grid lines\n      // currentWorksheet.showGridlines = false\n\n      //tên công ty\n      let nameCompanyRange = currentWorksheet.getRange(\"A1:B1\")\n      //quốc hiệu\n      let nationalNameRange = currentWorksheet.getRange(\"E1:H1\")\n      //tiêu ngữ\n      let crestRange = currentWorksheet.getRange(\"E2:H2\")\n      //tên báo cáo\n      let reportNameRange = currentWorksheet.getRange(\"B5:G6\")\n      //date\n      let dateRange = currentWorksheet.getRange(\"A2:C2\")\n\n      let date = new Date()\n      let dateValue = `Ngày ${date.getDate()} Tháng ${date.getMonth()} Năm ${date.getFullYear()}`\n\n\n\n      nationalNameRange.merge()\n      crestRange.merge()\n      nameCompanyRange.merge()\n      reportNameRange.merge()\n      dateRange.merge()\n\n      let nameCompany = currentWorksheet.getRange(\"A1\")\n      let nationalName = currentWorksheet.getRange(\"E1\")\n      let crest = currentWorksheet.getRange(\"E2\")\n      let reportName = currentWorksheet.getRange(\"B5\")\n\n\n      currentWorksheet.getRange(\"A2\").values = [[`${dateValue}`]]\n\n      nameCompany.values = [[\"Công ty Rạng Đông\"]]\n      nationalName.values = [['Cộng hòa xã hội chủ nghĩa Việt Nam']]\n      crest.values = [['Độc lập - Tự do - Hạnh phúc']]\n      reportName.values = [['BÁO CÁO SẢN XUẤT CÔNG NHÂN']]\n\n      nationalName.format.horizontalAlignment = \"Center\"\n      crest.format.horizontalAlignment = \"Center\"\n      nameCompany.format.horizontalAlignment = \"Left\"\n      reportName.format.horizontalAlignment = \"Center\"\n      reportName.format.font.bold = true\n      reportName.format.font.size = 18\n\n      let nameWorker = currentWorksheet.getRange(\"B9\")\n      let productPlant = currentWorksheet.getRange(\"F9\")\n      let timeStart = currentWorksheet.getRange(\"B10\")\n      let timeEnd = currentWorksheet.getRange(\"D10\")\n      let employeeCode = currentWorksheet.getRange(\"D9\")\n      let reporter = currentWorksheet.getRange(\"F19\")\n\n      nameWorker.values = [[\"Họ và tên:\"]]\n      productPlant.values = [['Phân xưởng:']]\n      timeStart.values = [['Từ ngày:']]\n      timeEnd.values = [['Đến ngày:']]\n      employeeCode.values = [['Mã nhân viên:']]\n      reporter.values = [[\"Người lập báo cáo\"]]\n\n      nameWorker.format.horizontalAlignment = \"Left\"\n      nameWorker.format.font.size = 12\n      nameWorker.format.font.italic = true\n\n      reporter.format.horizontalAlignment = \"Left\"\n      reporter.format.font.size = 12\n      reporter.format.font.italic = true\n\n      employeeCode.format.horizontalAlignment = \"Left\"\n      employeeCode.format.font.size = 12\n      employeeCode.format.font.italic = true\n\n      productPlant.format.horizontalAlignment = \"Left\"\n      productPlant.format.font.size = 12\n      productPlant.format.font.italic = true\n\n      timeStart.format.horizontalAlignment = \"Left\"\n      timeStart.format.font.size = 12\n      timeStart.format.font.italic = true\n\n      timeEnd.format.horizontalAlignment = \"Left\"\n      timeEnd.format.font.size = 12\n      timeEnd.format.font.italic = true\n\n\n\n\n\n\n      //tạo bảng mới có header sau khi nhân được kết quả\n      const expensesTable = currentWorksheet.tables.add(\"B12:G12\", true /*hasHeaders*/);\n      expensesTable.name = \"ReportData\";\n      // // TODO2: Queue commands to populate the table with data.\n      expensesTable.getHeaderRowRange().values =\n        [[\"STT\", \"Mã Công Việc\", \"Tên Công Việc\", \"Tổng chỉ tiêu\", \"Sản phẩm đạt\", \"Sản phẩm lỗi\"]];\n\n\n      expensesTable.getHeaderRowRange().format.fill.color = \"#009879\";\n      expensesTable.getDataBodyRange().format.fill.color = \"#FFFFFF\";\n      // expensesTable.rows.getItemAt(1).getRange().format.fill.color = \"#FFC300\";\n      // expensesTable.columns.getItemAt(0).getDataBodyRange().format.fill.color = \"#FFA07A\";\n\n      if (Office.context.requirements.isSetSupported(\"ExcelApi\", \"1.2\")) {\n        currentWorksheet.getUsedRange().format.autofitColumns();\n        currentWorksheet.getUsedRange().format.autofitRows();\n        currentWorksheet.getUsedRange().format.horizontalAlignment = \"Center\"\n      }\n\n      currentWorksheet.getRange(\"A2\").format.horizontalAlignment = \"Left\"\n      currentWorksheet.getRange(\"A2\").format.font.italic = true\n      await context.sync();\n    })\n      .catch((error) => {\n        console.log(\"Error: \" + error);\n        if (error instanceof OfficeExtension.Error) {\n          console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n        }\n      });\n  } else if (type == 2) {\n    await clearTable()\n\n    await Excel.run(async (context) => {\n      //lấy worksheet đang làm việc hiện tại\n      const currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\n\n      //xóa đường grid lines\n      // currentWorksheet.showGridlines = false\n\n      //tên công ty\n      let nameCompanyRange = currentWorksheet.getRange(\"A1:B1\")\n      //quốc hiệu\n      let nationalNameRange = currentWorksheet.getRange(\"E1:H1\")\n      //tiêu ngữ\n      let crestRange = currentWorksheet.getRange(\"E2:H2\")\n      //tên báo cáo\n      let reportNameRange = currentWorksheet.getRange(\"B5:G6\")\n      //date\n      let dateRange = currentWorksheet.getRange(\"A2:C2\")\n\n      let date = new Date()\n      let dateValue = `Ngày ${date.getDate()} Tháng ${date.getMonth()} Năm ${date.getFullYear()}`\n\n\n\n      nationalNameRange.merge()\n      crestRange.merge()\n      nameCompanyRange.merge()\n      reportNameRange.merge()\n      dateRange.merge()\n\n      let nameCompany = currentWorksheet.getRange(\"A1\")\n      let nationalName = currentWorksheet.getRange(\"E1\")\n      let crest = currentWorksheet.getRange(\"E2\")\n      let reportName = currentWorksheet.getRange(\"B5\")\n\n\n      currentWorksheet.getRange(\"A2\").values = [[`${dateValue}`]]\n\n      nameCompany.values = [[\"Công ty Rạng Đông\"]]\n      nationalName.values = [['Cộng hòa xã hội chủ nghĩa Việt Nam']]\n      crest.values = [['Độc lập - Tự do - Hạnh phúc']]\n      reportName.values = [['BÁO CÁO SẢN XUẤT PHÂN XƯỞNG']]\n\n      nationalName.format.horizontalAlignment = \"Center\"\n      crest.format.horizontalAlignment = \"Center\"\n      nameCompany.format.horizontalAlignment = \"Left\"\n      reportName.format.horizontalAlignment = \"Center\"\n      reportName.format.font.bold = true\n      reportName.format.font.size = 18\n\n      let nameWorker = currentWorksheet.getRange(\"B9\")\n\n      let timeStart = currentWorksheet.getRange(\"B10\")\n      let timeEnd = currentWorksheet.getRange(\"D10\")\n      let reporter = currentWorksheet.getRange(\"F19\")\n\n      nameWorker.values = [[\"Phân xưởng\"]]\n\n      timeStart.values = [['Từ ngày:']]\n      timeEnd.values = [['Đến ngày:']]\n      reporter.values = [[\"Người lập báo cáo\"]]\n\n      nameWorker.format.horizontalAlignment = \"Left\"\n      nameWorker.format.font.size = 12\n      nameWorker.format.font.italic = true\n\n      reporter.format.horizontalAlignment = \"Left\"\n      reporter.format.font.size = 12\n      reporter.format.font.italic = true\n\n\n\n      timeStart.format.horizontalAlignment = \"Left\"\n      timeStart.format.font.size = 12\n      timeStart.format.font.italic = true\n\n      timeEnd.format.horizontalAlignment = \"Left\"\n      timeEnd.format.font.size = 12\n      timeEnd.format.font.italic = true\n\n\n\n\n\n\n      //tạo bảng mới có header sau khi nhân được kết quả\n      const expensesTable = currentWorksheet.tables.add(\"B12:G12\", true /*hasHeaders*/);\n      expensesTable.name = \"ReportData\";\n      // // TODO2: Queue commands to populate the table with data.\n      expensesTable.getHeaderRowRange().values =\n        [[\"STT\", \"Mã Công Việc\", \"Tên Công Việc\", \"Tổng chỉ tiêu\", \"Sản phẩm đạt\", \"Sản phẩm lỗi\"]];\n\n      expensesTable.getHeaderRowRange().format.fill.color = \"#009879\";\n      expensesTable.getDataBodyRange().format.fill.color = \"#FFFFFF\";\n\n      if (Office.context.requirements.isSetSupported(\"ExcelApi\", \"1.2\")) {\n        currentWorksheet.getUsedRange().format.autofitColumns();\n        currentWorksheet.getUsedRange().format.autofitRows();\n        currentWorksheet.getUsedRange().format.horizontalAlignment = \"Center\"\n      }\n\n      currentWorksheet.getRange(\"A2\").format.horizontalAlignment = \"Left\"\n      currentWorksheet.getRange(\"A2\").format.font.italic = true\n      await context.sync();\n    })\n      .catch((error) => {\n        console.log(\"Error: \" + error);\n        if (error instanceof OfficeExtension.Error) {\n          console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n        }\n      });\n  } else {\n    await clearTable()\n\n    await Excel.run(async (context) => {\n      //lấy worksheet đang làm việc hiện tại\n      const currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\n\n      //xóa đường grid lines\n      // currentWorksheet.showGridlines = false\n\n      //tên công ty\n      let nameCompanyRange = currentWorksheet.getRange(\"A1:B1\")\n      //quốc hiệu\n      let nationalNameRange = currentWorksheet.getRange(\"E1:H1\")\n      //tiêu ngữ\n      let crestRange = currentWorksheet.getRange(\"E2:H2\")\n      //tên báo cáo\n      let reportNameRange = currentWorksheet.getRange(\"B5:G6\")\n      //date\n      let dateRange = currentWorksheet.getRange(\"A2:C2\")\n\n      let date = new Date()\n      let dateValue = `Ngày ${date.getDate()} Tháng ${date.getMonth()} Năm ${date.getFullYear()}`\n\n\n\n      nationalNameRange.merge()\n      crestRange.merge()\n      nameCompanyRange.merge()\n      reportNameRange.merge()\n      dateRange.merge()\n\n      let nameCompany = currentWorksheet.getRange(\"A1\")\n      let nationalName = currentWorksheet.getRange(\"E1\")\n      let crest = currentWorksheet.getRange(\"E2\")\n      let reportName = currentWorksheet.getRange(\"B5\")\n\n\n      currentWorksheet.getRange(\"A2\").values = [[`${dateValue}`]]\n\n      nameCompany.values = [[\"Công ty Rạng Đông\"]]\n      nationalName.values = [['Cộng hòa xã hội chủ nghĩa Việt Nam']]\n      crest.values = [['Độc lập - Tự do - Hạnh phúc']]\n      reportName.values = [['BÁO CÁO TIẾN ĐỘ SẢN XUẤT']]\n\n      nationalName.format.horizontalAlignment = \"Center\"\n      crest.format.horizontalAlignment = \"Center\"\n      nameCompany.format.horizontalAlignment = \"Left\"\n      reportName.format.horizontalAlignment = \"Center\"\n      reportName.format.font.bold = true\n      reportName.format.font.size = 18\n\n      let nameWorker = currentWorksheet.getRange(\"B9\")\n\n      let timeStart = currentWorksheet.getRange(\"B10\")\n      let timeEnd = currentWorksheet.getRange(\"D10\")\n      let reporter = currentWorksheet.getRange(\"D19\")\n\n      nameWorker.values = [[\"Phân xưởng\"]]\n\n      timeStart.values = [['Từ ngày:']]\n      timeEnd.values = [['Đến ngày:']]\n      reporter.values = [[\"Người lập báo cáo\"]]\n\n      nameWorker.format.horizontalAlignment = \"Left\"\n      nameWorker.format.font.size = 12\n      nameWorker.format.font.italic = true\n\n      reporter.format.horizontalAlignment = \"Left\"\n      reporter.format.font.size = 12\n      reporter.format.font.italic = true\n\n\n\n      timeStart.format.horizontalAlignment = \"Left\"\n      timeStart.format.font.size = 12\n      timeStart.format.font.italic = true\n\n      timeEnd.format.horizontalAlignment = \"Left\"\n      timeEnd.format.font.size = 12\n      timeEnd.format.font.italic = true\n\n\n\n\n\n\n      //tạo bảng mới có header sau khi nhân được kết quả\n      const expensesTable = currentWorksheet.tables.add(\"B12:E12\", true /*hasHeaders*/);\n      expensesTable.name = \"ReportData\";\n      // // TODO2: Queue commands to populate the table with data.\n      expensesTable.getHeaderRowRange().values =\n        [[\"Ngày\", \"Chỉ tiêu dự kiến\", \"Tổng SP đạt\", \"Tổng SP lỗi\"]];\n\n      expensesTable.getHeaderRowRange().format.fill.color = \"#009879\";\n      expensesTable.getDataBodyRange().format.fill.color = \"#FFFFFF\";\n\n      if (Office.context.requirements.isSetSupported(\"ExcelApi\", \"1.2\")) {\n        currentWorksheet.getUsedRange().format.autofitColumns();\n        currentWorksheet.getUsedRange().format.autofitRows();\n        currentWorksheet.getUsedRange().format.horizontalAlignment = \"Center\"\n      }\n\n      currentWorksheet.getRange(\"A2\").format.horizontalAlignment = \"Left\"\n      currentWorksheet.getRange(\"A2\").format.font.italic = true\n      await context.sync();\n    })\n      .catch((error) => {\n        console.log(\"Error: \" + error);\n        if (error instanceof OfficeExtension.Error) {\n          console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n        }\n      });\n  }\n}\n\n// Hàm lấy dữ liệu từ database\nasync function connectDB() {\n  await Excel.run(async (context) => {\n    const id_worker = document.getElementById(\"id_worker_taskpane\").innerHTML;\n    const id_PX = document.getElementById(\"abc\").innerHTML;\n    const time_work = document.getElementById(\"time_taskpane\").innerHTML;\n    const type_report = document.getElementById(\"user-name\").innerHTML;\n    const id_task = document.getElementById(\"task_taskpane\").innerHTML;\n\n    if (!type_report) {\n      document.querySelector(\".taskpane__error\").innerHTML = \"Bạn cần nhập đủ thông tin\"\n      return\n    } else {\n      if (type_report == \"Báo cáo sản xuất công nhân\") {\n        if (!id_worker || !time_work) {\n          document.querySelector(\".taskpane__error\").innerHTML = \"Bạn cần nhập đủ thông tin\"\n          return\n        }\n      } else if (type_report == \"Báo cáo sản xuất phân xưởng\") {\n        if (!id_PX || !time_work) {\n          document.querySelector(\".taskpane__error\").innerHTML = \"Bạn cần nhập đủ thông tin\"\n          return\n        }\n      } else {\n        if (!id_PX || !id_task) {\n          document.querySelector(\".taskpane__error\").innerHTML = \"Bạn cần nhập đủ thông tin\"\n          return\n        }\n      }\n    }\n    document.querySelector(\".taskpane__error\").innerHTML = \"\"\n\n    //scan worksheet để lấy dữ liệu:\n    //lấy worksheet đang làm việc hiện tại\n    const currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\n\n    //mảng để lưu các giá trị người dùng nhập vào\n    let dataClient = [];\n\n\n    let ranges = currentWorksheet.getUsedRange();\n    // console.log(ranges)\n    //cái sau là bất đồng bộ nên cần chờ\n    ranges.load(\"values\")\n    // ranges.load(\"address\")\n    await context.sync();\n\n    // const RegExp = /^[\\{]([a-z]|\\-|\\_)+[\\}]$/\n    const RegExp = /^[\\{]([a-z]|[0-9]|\\(|\\)|\\-|\\_|\\/)+[\\}]$/\n    // console.log(ranges.address)\n    for (let value of ranges.values) {\n      for (let text of value) {\n        if (RegExp.test(text)) {\n          dataClient.push(text)\n        }\n      }\n    }\n\n    //mảng kết quả trả về\n    let result = []\n\n    if (type_report == \"Báo cáo sản xuất công nhân\") {\n      const options = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(\n          {\n            worker: id_worker,\n            time: time_work,\n            dataClient\n          }\n        )\n      };\n      await fetch('http://localhost:8080/data', options)\n        .then((res) => res.text())\n        .then(data => {\n          console.log(\"Giá trị Server trả về là : \" + data)\n          result.push(JSON.parse(data))\n        }\n        );\n    } else if (type_report == \"Báo cáo sản xuất phân xưởng\") {\n      const options = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(\n          {\n            productplant: id_PX,\n            time: time_work,\n            dataClient\n          }\n        )\n      };\n      await fetch('http://localhost:8080/data', options)\n        .then((res) => res.text())\n        .then(data => {\n          console.log(\"Giá trị Server trả về là : \" + data)\n          result.push(JSON.parse(data))\n        }\n        );\n    } else {\n      const options = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(\n          {\n            productplant: id_PX,\n            task: id_task,\n            dataClient\n          }\n        )\n      };\n      await fetch('http://localhost:8080/data', options)\n        .then((res) => res.text())\n        .then(data => {\n          console.log(\"Giá trị Server trả về là : \" + data)\n          result.push(JSON.parse(data))\n        }\n        );\n    }\n    \n    console.log(\"Excel nhận được sau khi fetch xong: \" + result)\n    // const RegExp2 = /^[\\{]([a-z]|\\-|\\_)+[\\}]$/\n\n    // for (let value of ranges.values) {\n    //   for (let text of value) {\n    //     if (RegExp2.test(text)) {\n    //       // console.log(text)\n    //     }\n    //   }\n    // }\n\n    //đổ dữ liệu từ server ra file excel:\n    for (let i = 0; i < result[0].length; i++) {\n      let foundRange = ranges.find(`{${result[0][i].data}}`, {\n        completeMatch: true, // Match the whole cell value.\n        matchCase: false, // Don't match case.\n        searchDirection: Excel.SearchDirection.forward // Start search at the beginning of the range.\n      });\n      foundRange.load(\"address\");\n      await context.sync();\n      // console.log(`Vị trí của ${result[i].data} là ` + foundRange.address);\n      //thay đổi vị trí từ Food thành Kiền\n      if (foundRange.address) {\n        foundRange.values = [[`${result[0][i].value}`]]\n        foundRange.format.autofitColumns();\n        await context.sync();\n      } else {\n        break\n      }\n    }\n  })\n    .catch((error) => {\n      console.log(\"Error: \" + error);\n      if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n      }\n    });\n}\n\n\n// Hàm xóa toàn bộ worksheet\nasync function clearTable() {\n  await Excel.run(async (context) => {\n\n    // TODO1: Queue table creation logic here.\n\n    //lấy worksheet đang làm việc hiện tại\n    $('select.taskpane__btn').prop('selectedIndex',0);\n    const currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\n\n    currentWorksheet.getRange().clear()\n    await context.sync();\n  })\n    .catch((error) => {\n      console.log(\"Error: \" + error);\n      if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n      }\n    });\n}\n\n\n// Xử lý các dialog\nlet dialog = null;\n\nfunction openDialog() {\n  // TODO1: Call the Office Common API that opens a dialog\n  Office.context.ui.displayDialogAsync(\n    'https://localhost:3000/popup.html',\n    { height: 32, width: 30 },\n\n    // TODO2: Add callback parameter.\n    function (result) {\n      // console.log(result)\n      dialog = result.value;\n      // console.log(result.value)\n\n      // Nhận được loại báo cáo\n      // Báo cáo cá nhân: value = person\n      // Báo cáo theo xưởng: value = productplant\n      dialog.addEventHandler(Office.EventType.DialogMessageReceived, processTypeReport);\n    }\n\n  );\n}\n\nfunction processTypeReport(arg) {\n  // console.log(arg.message)\n  if (arg.message == \"worker\") {\n    document.getElementById(\"user-name\").innerHTML = \"Báo cáo sản xuất công nhân\";\n  } else if (arg.message == \"productplant\") {\n    document.getElementById(\"user-name\").innerHTML = \"Báo cáo sản xuất phân xưởng\";\n  } else {\n    document.getElementById(\"user-name\").innerHTML = \"Báo cáo tiến độ sản xuất\";\n  }\n\n  // console.log(\"2\")\n  dialog.close();\n  // Mở dialog thứ 2 để chọn xưởng\n  // if (arg.message == \"worker\") {\n  //   openProductPlantDialog();\n  // } \n  openProductPlantDialog();\n\n}\n\nfunction openProductPlantDialog() {\n  // console.log(\"3\")\n  Office.context.ui.displayDialogAsync(\"https://localhost:3000/ProductPlant.html\", { width: 35, height: 30 },\n    (result) => {\n\n      // console.log(result)\n\n      if (result.status === Office.AsyncResultStatus.Failed) {\n        if (result.error.code === 12007) {\n          // console.log(\"Dialog 1 chưa đóng hẳn\")\n          openProductPlantDialog(); // Recursive call\n        }\n        else {\n          // Handle other errors\n          console.log(\"Lỗi gì đó\")\n          openProductPlantDialog(); // Recursive call\n\n        }\n      }\n      console.log(\"Mở dialog 2 thành công\")\n      dialog = result.value;\n      // console.log(result.value)\n      dialog.addEventHandler(Office.EventType.DialogMessageReceived, processProductPlantValue);\n      // console.log(\"Lấy dữ liệu từ dialog\")\n    }\n  );\n}\n\nfunction processProductPlantValue(arg) {\n  // Gửi id_productplant lên taskpane\n  document.getElementById(\"abc\").innerHTML = arg.message;\n\n  dialog.close();\n\n  let type_report = document.getElementById(\"user-name\").innerHTML\n  if (type_report == \"Báo cáo sản xuất công nhân\") {\n    console.log(\"else 1\")\n    openWorkerDialog()\n  } else if (type_report == \"Báo cáo sản xuất phân xưởng\") {\n    console.log(\"Chuẩn bị mở dialog lấy thời gian\")\n    // document.querySelector(\".taskpane__error\").innerHTML = \"test\"\n    openDateDialog()\n  } else {\n    openTaskDialog()\n  }\n}\n\nfunction openWorkerDialog() {\n  let id_productplant = document.getElementById(\"abc\").innerHTML\n  Office.context.ui.displayDialogAsync(`https://localhost:3000/Worker.html?id=${id_productplant}`, { width: 30, height: 36 },\n    (result) => {\n      // console.log(result)\n      if (result.status === Office.AsyncResultStatus.Failed) {\n        if (result.error.code === 12007) {\n          // console.log(\"Dialog 1 chưa đóng hẳn\")\n          openWorkerDialog(); // Recursive call\n        }\n        else {\n          // Handle other errors\n          console.log(\"Lỗi gì đó ở Dialog Worker\")\n          openWorkerDialog(); // Recursive call\n        }\n      }\n      console.log(\"Mở dialog 3 thành công\")\n\n      dialog = result.value;\n      dialog.addEventHandler(Office.EventType.DialogMessageReceived, processWorkerValue);\n      console.log(\"Nhận event Dialog Worker\")\n\n    }\n  );\n}\n\nfunction processWorkerValue(arg) {\n  console.log(\"test hàm dialog 3\")\n  document.getElementById(\"id_worker_taskpane\").innerHTML = arg.message\n  dialog.close()\n\n  // Mở Time Dialog\n  openDateDialog()\n}\n\nfunction openDateDialog() {\n  Office.context.ui.displayDialogAsync(\"https://localhost:3000/Date.html?\", { width: 40, height: 40 },\n    (result) => {\n\n      console.log(\"Chạy vào hàm mở dialog 4\")\n      // console.log(result)\n      if (result.status === Office.AsyncResultStatus.Failed) {\n        if (result.error.code === 12007) {\n          // console.log(\"Dialog 1 chưa đóng hẳn\")\n          openDateDialog(); // Recursive call\n        }\n        else {\n          // Handle other errors\n          console.log(\"Lỗi gì đó ở Dialog Time\")\n          openDateDialog(); // Recursive call\n        }\n      }\n      console.log(\"Mở dialog 4 thành công\")\n      dialog = result.value;\n      // console.log(result.value)\n      dialog.addEventHandler(Office.EventType.DialogMessageReceived, processTimeValue);\n      // console.log(\"Lấy dữ liệu từ dialog\")\n    }\n  );\n}\n\nfunction processTimeValue(arg) {\n  console.log(\"test hàm dialog 4\")\n  console.log(arg.message)\n  document.getElementById(\"time_taskpane\").innerHTML = arg.message\n  dialog.close()\n\n  // Gọi hàm tạo template báo cáo ở đây\n  // createReport()\n}\n\nfunction openTaskDialog() {\n  let id_productplant = document.getElementById(\"abc\").innerHTML\n  Office.context.ui.displayDialogAsync(`https://localhost:3000/task.html?id=${id_productplant}`, { width: 30, height: 36 },\n    (result) => {\n      // console.log(result)\n      if (result.status === Office.AsyncResultStatus.Failed) {\n        if (result.error.code === 12007) {\n          // console.log(\"Dialog 1 chưa đóng hẳn\")\n          openTaskDialog(); // Recursive call\n        }\n        else {\n          // Handle other errors\n          console.log(\"Lỗi gì đó ở Dialog Worker\")\n          openTaskDialog(); // Recursive call\n        }\n      }\n\n      dialog = result.value;\n      dialog.addEventHandler(Office.EventType.DialogMessageReceived, processTaskValue);\n      console.log(\"Nhận event Dialog Worker\")\n\n    }\n  );\n}\n\nfunction processTaskValue(arg) {\n  console.log(arg.message)\n  document.getElementById(\"task_taskpane\").innerHTML = arg.message\n  dialog.close()\n}\n\n\n"],"names":["type","clearTable","Excel","run","context","currentWorksheet","workbook","worksheets","getActiveWorksheet","nameCompanyRange","getRange","nationalNameRange","crestRange","reportNameRange","dateRange","date","Date","dateValue","getDate","getMonth","getFullYear","merge","nameCompany","nationalName","crest","reportName","values","format","horizontalAlignment","font","bold","size","nameWorker","productPlant","timeStart","timeEnd","employeeCode","reporter","italic","expensesTable","tables","add","name","getHeaderRowRange","fill","color","getDataBodyRange","Office","requirements","isSetSupported","getUsedRange","autofitColumns","autofitRows","sync","catch","error","console","log","OfficeExtension","Error","JSON","stringify","debugInfo","connectDB","id_worker","document","getElementById","innerHTML","id_PX","time_work","type_report","id_task","querySelector","dataClient","ranges","load","RegExp","value","text","test","push","result","options","method","headers","body","worker","time","fetch","then","res","data","parse","productplant","task","i","length","foundRange","find","completeMatch","matchCase","searchDirection","SearchDirection","forward","address","$","prop","clear","onReady","info","host","HostType","style","display","hide","on","createReport","this","val","onclick","openDialog","dialog","ui","displayDialogAsync","height","width","addEventHandler","EventType","DialogMessageReceived","processTypeReport","arg","message","close","openProductPlantDialog","status","AsyncResultStatus","Failed","code","processProductPlantValue","openWorkerDialog","openDateDialog","openTaskDialog","id_productplant","processWorkerValue","processTimeValue","processTaskValue"],"sourceRoot":""}